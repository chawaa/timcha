{"version":3,"sources":["pages/HomePage/HomePage.js"],"names":["mapStateToProps","createStructuredSelector","currentUser","selectCurrentUser","token","selectToken","feedPosts","selectFeedPosts","hasMore","selectHasMore","fetching","selectFeedFetching","connect","dispatch","fetchFeedPostsStart","authToken","offset","clearPosts","useEffect","document","title","useScrollPositionThrottled","atBottom","length","style","fontSize","className","icon","data-test","avatar","username","subText","fullName","padding","avatarMedium","max","width","card"],"mappings":"0GAAA,qIAoFMA,EAAkBC,YAAyB,CAC/CC,YAAaC,IACbC,MAAOC,IACPC,UAAWC,IACXC,QAASC,IACTC,SAAUC,MASGC,sBAAQZ,GANI,SAACa,GAAD,MAAe,CACxCC,oBAAqB,SAACC,EAAWC,GAAZ,OACnBH,EAASC,YAAoBC,EAAWC,KAC1CC,WAAY,kBAAMJ,EAASI,mBAGdL,EA5EE,SAAC,GAQX,IAPLV,EAOI,EAPJA,YACAY,EAMI,EANJA,oBACAG,EAKI,EALJA,WACAb,EAII,EAJJA,MACAE,EAGI,EAHJA,UACAE,EAEI,EAFJA,QACAE,EACI,EADJA,SAoBA,OAlBAQ,qBAAU,WAGR,OAFAC,SAASC,MAAT,aACAN,EAAoBV,GACb,WACLa,OAED,CAACA,EAAYH,EAAqBV,IAErCiB,aACE,YAAkB,EAAfC,UACed,IAAYE,GAC1BI,EAAoBV,EAAOE,EAAUiB,UAGzC,KACA,CAACf,EAASE,IAIV,kBAAC,WAAD,KACE,kBAAC,UAAD,KACE,kBAAC,UAAD,MACA,wBAAIc,MAAO,CAAEC,SAAU,UAAYC,UAAU,gBAA7C,cAGA,kBAAC,UAAD,CAAMC,KAAK,yBAEb,0BAAMC,YAAU,YAAYF,UAAU,kBAClChB,GAAiC,IAArBJ,EAAUiB,OAGtB,kBAAC,WAAD,KACE,kBAAC,UAAD,MACA,2BAAOG,UAAU,WACf,yBAAKA,UAAU,oBACb,kBAAC,UAAD,CACEG,OAAQ3B,EAAY2B,OACpBC,SAAU5B,EAAY4B,SACtBC,QAAS7B,EAAY8B,SACrBR,MAAO,CAAES,QAAS,KAClBC,cAAY,IAEd,kBAAC,UAAD,CAAgBC,IAAK,EAAGX,MAAO,CAAEY,MAAO,UACxC,kBAAC,UAAD,SAdN,kBAAC,UAAD,CAAgBC,MAAI","file":"static/js/7.2f2a9814.chunk.js","sourcesContent":["import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { selectCurrentUser, selectToken } from '../../redux/user/userSelectors';\nimport {\n  selectFeedPosts,\n  selectHasMore,\n  selectFeedFetching,\n} from '../../redux/feed/feedSelectors';\nimport { fetchFeedPostsStart, clearPosts } from '../../redux/feed/feedActions';\n\nimport useScrollPositionThrottled from '../../hooks/useScrollPositionThrottled';\n\nimport Feed from '../../components/Feed/Feed';\nimport UserCard from '../../components/UserCard/UserCard';\nimport SmallFooter from '../../components/Footer/SmallFooter/SmallFooter';\nimport MobileHeader from '../../components/Header/MobileHeader/MobileHeader';\nimport Icon from '../../components/Icon/Icon';\nimport NewPostButton from '../../components/NewPost/NewPostButton/NewPostButton';\nimport SuggestedUsers from '../../components/Suggestion/SuggestedUsers/SuggestedUsers';\n\nconst HomePage = ({\n  currentUser,\n  fetchFeedPostsStart,\n  clearPosts,\n  token,\n  feedPosts,\n  hasMore,\n  fetching,\n}) => {\n  useEffect(() => {\n    document.title = `Timcha`;\n    fetchFeedPostsStart(token);\n    return () => {\n      clearPosts();\n    };\n  }, [clearPosts, fetchFeedPostsStart, token]);\n\n  useScrollPositionThrottled(\n    ({ atBottom }) => {\n      if (atBottom && hasMore && !fetching) {\n        fetchFeedPostsStart(token, feedPosts.length);\n      }\n    },\n    null,\n    [hasMore, fetching]\n  );\n\n  return (\n    <Fragment>\n      <MobileHeader>\n        <NewPostButton />\n        <h3 style={{ fontSize: '2.5rem' }} className=\"heading-logo\">\n          Timcha\n        </h3>\n        <Icon icon=\"paper-plane-outline\" />\n      </MobileHeader>\n      <main data-test=\"page-home\" className=\"home-page grid\">\n        {!fetching && feedPosts.length === 0 ? (\n          <SuggestedUsers card />\n        ) : (\n          <Fragment>\n            <Feed />\n            <aside className=\"sidebar\">\n              <div className=\"sidebar__content\">\n                <UserCard\n                  avatar={currentUser.avatar}\n                  username={currentUser.username}\n                  subText={currentUser.fullName}\n                  style={{ padding: '0' }}\n                  avatarMedium\n                />\n                <SuggestedUsers max={5} style={{ width: '100%' }} />\n                <SmallFooter />\n              </div>\n            </aside>\n          </Fragment>\n        )}\n      </main>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken,\n  feedPosts: selectFeedPosts,\n  hasMore: selectHasMore,\n  fetching: selectFeedFetching,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchFeedPostsStart: (authToken, offset) =>\n    dispatch(fetchFeedPostsStart(authToken, offset)),\n  clearPosts: () => dispatch(clearPosts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n"],"sourceRoot":""}